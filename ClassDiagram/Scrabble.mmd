classDiagram
    direction TB

    %% ENUMS
    class BonusSquareType {
        <<Enumeration>>
        Normal
        DoubleLetter
        TripleLetter
        DoubleWord
        TripleWord
    }

    class TurnActionType {
        <<Enumeration>>
        PlaceWord
        SwapTiles
        SkipTurn
        ShuffleTiles
        QuitGame
    }

    class Direction {
        <<Enumeration>>
        Horizontal
        Vertical
    }

    class MoveError {
        <<Enumeration>>
        InvalidPlacement
        WordNotInDictionary
        NotConnected
        InvalidFirstMove
        TileNotInRack
        InvalidCoordinates
        TooFewPlayers
        TooManyPlayers
        DuplicatePlayerName
        GameAlreadyStarted
        InvalidTilesToSwap
        TooManyTilesToSwap
    }

    %% INTERFACES
    class IDictionary {
        <<interface>>
        +IsValidWord(string word) : bool
    }

    class ITileBag {
        <<interface>>
        +DrawTiles(int count) : List~Tile~
        +ReturnTiles(List~Tile~ tiles) : void
        +GetRemainingCount() : int
    }

    class IPlayer {
        <<interface>>
        +GetName() : string
        +GetScore() : int
        +GetRack() : List~Tile~
        +AddScore(int points) : void
        +AddTiles(List~Tile~ tiles) : void
        +RemoveTiles(List~Tile~ tiles) : bool
        +HasTile(Tile tile) : bool
        +GetRackSize() : int
        +GetRemainingTilePoints() : int
    }

    class IBoard {
        <<interface>>
        +PlaceTile(Tile tile, int x, int y) : bool
        +GetSquare(int x, int y) : Square
        +IsSquareEmpty(int x, int y) : bool

        +HasTileAt(int x, int y) : bool
        +IsValidCoordinate(int x, int y) : bool
        +GetHorizontalWord(int row, int col) : string
        +GetVerticalWord(int row, int col) : string
        +GetAllFormedWords(List~TilePlacement~ placements) : List~string~
        +GetAdjacentOccupiedSquares(int x, int y) : List~Square~
        +FindWordStart(int row, int col, Direction direction) : int
        +GetTilesOnBoard() : List~TilePlacement~
    }

    %% CORE GAME CLASSES
    class GameControl {
        -List~IPlayer~ _players
        -int _activePlayerIndex
        -IBoard _gameBoard
        -ITileBag _tileBag
        -IDictionary _dictionary

        -bool _gameEnded
        -bool _gameStarted
        -int _consecutiveSkips
        -IPlayer _winner
        -GameStats _gameStats
        -bool _gameEnded
        -bool _gameStarted
        -int _consecutiveSkips
        -IPlayer _winner 
        -const int MIN_PLAYERS = 2
        -const int MAX_PLAYERS = 4
        %% Game Stats integrated
        -int _turnsPlayed
        -int _totalWordsFormed
        -string _highestScoringWord
        -int _highestWordScore


        +event Func~Tile, char~ OnRequestBlankTileChar
        +event Action~string~ OnDisplayMessage
        +event Func~string, bool~ OnConfirmAction
        +event Action~string, object~ OnGameEvent
        +event Func~string, string~ OnGetUserInput

        +GameControl(IDictionary dictionary, ITileBag tileBag, IBoard board)
        +AddPlayer(IPlayer player) : bool
        +RemovePlayer(string playerName) : bool
        +StartGame() : bool
        +GetCurrentPlayer() : IPlayer
        +GetAllPlayers() : List~IPlayer~
        +PerformTurn(IPlayer player, List~TilePlacement~ placements) : MoveError
        +SwapTiles(IPlayer player, List~Tile~ tilesToSwap) : MoveError
        +SkipTurn(IPlayer player) : MoveError
        +IsGameOver() : bool
        +GetLastFormedWords() : List~string~

        +GetLastFormedWords() : List~string~ 
        +NextTurn() : void
        +RefillPlayerRack(IPlayer player) : void
        +CalculateWordScore(List~string~ words, List~TilePlacement~ placements) : int
        +IsPlacementValid(List~TilePlacement~ placements) : MoveError
        +IsValidFirstMove(List~TilePlacement~ placements) : bool
        +AreConsecutivePlacements(List~TilePlacement~ placements) : bool
        +ConnectsToExistingTiles(List~TilePlacement~ placements) : bool
        +CheckEndGameConditions() : void
        +CalculateFinalScores() : void
        +ValidatePlayerCount() : bool
        +IsPlayerNameUnique(string name) : bool

        +IncrementTurns() : void
        +AddWordsFormed(int count) : void
        +UpdateHighestWord(string word, int score) : void
        +GetTurnsPlayed() : int
        +GetTotalWords() : int
        +GetHighestWord() : string
        +GetHighestScore() : int
    }

    class Player {
        -string _name
        -int _score
        -List~Tile~ _rack
        -const int MAX_RACK_SIZE = 7

        +Player(string name)
        +GetName() : string
        +GetScore() : int
        +GetRack() : List~Tile~
        +AddScore(int points) : void
        +AddTiles(List~Tile~ tiles) : void
        +RemoveTiles(List~Tile~ tiles) : bool
        +HasTile(Tile tile) : bool
        +GetRackSize() : int
        +GetRemainingTilePoints() : int
    }
    IPlayer <|.. Player : implements

    class Tile {
        -char _letter
        -int _points
        -bool _isBlank

        +Tile(char letter, int points, bool isBlank)
        +GetLetter() : char
        +GetPoints() : int
        +IsBlank() : bool
        +SetLetter(char letter) : void
        +ToString() : string
    }

    class TileBag {
        -List~Tile~ _tiles
        -Random _random

        +TileBag()
        +DrawTiles(int count) : List~Tile~
        +ReturnTiles(List~Tile~ tiles) : void
        +GetRemainingCount() : int
        +InitializeStandardTiles() : void
    }
    ITileBag <|.. TileBag : implements

    class Board {
        -Square[,] _grid
        -const int BOARD_SIZE = 15
        -const int CENTER_POSITION = 7

        +Board()
        +PlaceTile(Tile tile, int x, int y) : bool
        +GetSquare(int x, int y) : Square
        +IsSquareEmpty(int x, int y) : bool

        +HasTileAt(int x, int y) : bool
        +IsValidCoordinate(int x, int y) : bool
        +GetHorizontalWord(int row, int col) : string
        +GetVerticalWord(int row, int col) : string
        +GetAllFormedWords(List~TilePlacement~ placements) : List~string~
        +GetAdjacentOccupiedSquares(int x, int y) : List~Square~
        +FindWordStart(int row, int col, Direction direction) : int
        +GetTilesOnBoard() : List~TilePlacement~
        +InitializeBonusSquares() : void
    }
    IBoard <|.. Board : implements

    class Square {
        -int _x
        -int _y
        -BonusSquareType _bonusType
        -Tile _currentTile

        +Square(int x, int y, BonusSquareType bonusType)
        +GetX() : int
        +GetY() : int
        +GetBonusType() : BonusSquareType
        +GetTile() : Tile
        +SetTile(Tile tile) : void
        +IsEmpty() : bool
    }

    class Dictionary {
        -HashSet~string~ _wordSet

        +Dictionary(string dictionaryFilePath)
        +IsValidWord(string word) : bool
        -LoadDictionary(string filePath) : void
    }
    IDictionary <|.. Dictionary : implements

    
    class ConsoleGameUI {
        -GameControl _gameControl 
        +ConsoleGameUI(GameControl gameControl)
        +StartGameLoop() : void
        +DisplayGameState(IPlayer currentPlayer, IBoard board) : void 
        +DisplayBoard(List~TilePlacement~ tilesOnBoard) : void 
        +DisplayPlayerInfo(IPlayer player) : void
        +DisplayAllPlayerScores(List~IPlayer~ players) : void
        +GetPlayerAction() : TurnActionType
        +GetPlacementInput(IPlayer player) : List~TilePlacement~
        +GetSwapTilesInput(IPlayer player) : List~Tile~
        +ShowHelp() : void
        +DisplayEndGame(IPlayer winner, List~IPlayer~ allPlayers) : void
        +PromptForBlankTileChar(Tile blankTile) : char
        +GetPlayerName(int playerNumber) : string
        +ConfirmPlayerSetup(List~IPlayer~ players) : bool
        +ParseCoordinates(string input) : int[]
        +ParseDirection(string input) : Direction
        +ParseTiles(string input, List~Tile~ rack) : List~Tile~
        +IsValidInput(string input) : bool
        +DisplayError(string message) : void
        +ClearScreen() : void
        +ValidatePlayerName(string name) : bool
        -HandleDisplayMessage(string msg) : void
        -HandleRequestBlankTileChar(Tile blankTile) : char
        -HandleConfirmAction(string prompt) : bool
        -HandleGameEvent(string eventType, object eventData) : void
        -HandleGetUserInput(string prompt) : string
    }

    %% HELPER CLASSES
    class TilePlacement {
        <<struct>>
        -Tile _tile
        -int _x
        -int _y

        +TilePlacement(Tile tile, int x, int y)
        +GetTile() : Tile
        +GetX() : int
        +GetY() : int
    }

    %% RELATIONSHIPS

    GameControl "1" o-- "*" IPlayer : manages
    GameControl "1" *-- "1" IBoard : uses
    GameControl "1" --> ITileBag : uses
    GameControl "1" --> IDictionary : uses
    GameControl --> MoveError : uses
    GameControl --> TurnActionType : uses

    
    %% GameControl Relationships
    GameControl "1" o-- "*" IPlayer : manages
    GameControl "1" *-- "1" IBoard : uses
    GameControl "1" *-- "1" GameStats : tracks
    GameControl "1" --> ITileBag : uses
    GameControl "1" --> IDictionary : uses

    %% Interface Implementations
    IPlayer <|.. Player
    ITileBag <|.. TileBag
    IBoard <|.. Board
    IDictionary <|.. Dictionary

    Player "1" *-- "*" Tile : has in rack

    TileBag "1" *-- "*" Tile : contains
    Board "1" *-- "*" Square : consists of
    Board --> Direction : uses
    Square "1" o-- "0..1" Tile : can contain
    Square --> BonusSquareType : has
    TilePlacement --> Tile : holds

    %% TilePlacement Relationships
    TilePlacement --> Tile : holds

    %% Conceptual UI Interaction (not a direct association in core logic)
    ConsoleGameUI ..> GameControl : subscribes to events
    ConsoleGameUI --> IBoard : requests board state (via GameControl's IBoard or directly if passed)
    ConsoleGameUI --> IPlayer : requests player info (via GameControl's IPlayers or directly if passed)
    ConsoleGameUI --> TurnActionType : uses
    ConsoleGameUI --> MoveError : uses
    ConsoleGameUI --> Direction : uses
