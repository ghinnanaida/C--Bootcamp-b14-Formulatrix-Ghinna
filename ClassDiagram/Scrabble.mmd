classDiagram
    direction TB

    %% ENUMS
    class BonusSquareType {
        <<Enumeration>>
        Normal
        DoubleLetter
        TripleLetter
        DoubleWord
        TripleWord
    }

    class TurnActionType {
        <<Enumeration>>
        PlaceWord
        SwapTiles
        SkipTurn
        ShowHelp
        QuitGame
    }

    class Direction {
        <<Enumeration>>
        Horizontal
        Vertical
    }

    class MoveError {
        <<Enumeration>>
        InvalidPlacement
        WordNotInDictionary
        NotConnected
        InvalidFirstMove
        TileNotInRack
        InvalidCoordinates
        TooFewPlayers
        TooManyPlayers
        DuplicatePlayerName
        GameAlreadyStarted
    }

    %% DELEGATES
    class RequestBlankTileChar {
        <<delegate>>
        +char Invoke(Tile blankTile)
    }
    
    class ValidateWord {
        <<delegate>>
        +bool Invoke(string word)
    }
    
    class DisplayMessage {
        <<delegate>>
        +void Invoke(string message)
    }
    
    class ConfirmAction {
        <<delegate>>
        +bool Invoke(string prompt)
    }
    
    class NotifyGameEvent {
        <<delegate>>
        +void Invoke(string eventType, object eventData)
    }
    
    class GetUserInput {
        <<delegate>>
        +string Invoke(string prompt)
    }

    %% INTERFACES
    class IDictionaryValidator {
        <<interface>>
        +IsValidWord(string word) : bool
    }

    class ITileSource {
        <<interface>>
        +DrawTiles(int count) : List~Tile~
        +ReturnTiles(List~Tile~ tiles) : void
        +GetRemainingCount() : int
    }

    %% CORE GAME CLASSES
    class GameControl {
        -List~Player~ _players
        -int _activePlayerIndex
        -Board _gameBoard
        -ITileSource _tileBag
        -IDictionaryValidator _dictionaryValidator
        -bool _gameEnded
        -bool _gameStarted
        -bool _isFirstMove
        -int _consecutiveSkips
        -List~string~ _lastFormedWords
        -Player _winner
        -const int MIN_PLAYERS = 2
        -const int MAX_PLAYERS = 4

        +RequestBlankTileChar OnRequestBlankTileChar
        +ValidateWord OnValidateWord
        +DisplayMessage OnDisplayMessage
        +ConfirmAction OnConfirmAction
        +NotifyGameEvent OnGameEvent

        +GameControl(IDictionaryValidator validator, ITileSource tileSource)
        +AddPlayer(string playerName) : bool
        +RemovePlayer(string playerName) : bool
        +GetPlayerCount() : int
        +CanStartGame() : bool
        +StartGame() : bool
        +GetCurrentPlayer() : Player
        +GetAllPlayers() : List~Player~
        +GetBoard() : Board
        +PerformTurn(Player player, List~TilePlacement~ placements) : int
        +SwapTiles(Player player, List~Tile~ tilesToSwap) : bool
        +SkipTurn(Player player) : bool
        +IsGameOver() : bool
        +GetWinner() : Player
        +GetLastFormedWords() : List~string~
        +NextTurn() : void
        -RefillPlayerRack(Player player) : void
        -CalculateWordScore(List~string~ words, List~TilePlacement~ placements) : int
        -IsPlacementValid(List~TilePlacement~ placements) : bool
        -IsValidFirstMove(List~TilePlacement~ placements) : bool
        -AreConsecutivePlacements(List~TilePlacement~ placements) : bool
        -ConnectsToExistingTiles(List~TilePlacement~ placements) : bool
        -CheckEndGameConditions() : void
        -CalculateFinalScores() : void
        -ValidatePlayerCount() : bool
        -IsPlayerNameUnique(string name) : bool
    }

    class Player {
        -string _name
        -int _score
        -List~Tile~ _rack
        -const int MAX_RACK_SIZE = 7

        +Player(string name)
        +GetName() : string
        +GetScore() : int
        +GetRack() : List~Tile~
        +AddScore(int points) : void
        +AddTiles(List~Tile~ tiles) : void
        +RemoveTiles(List~Tile~ tiles) : bool
        +HasTile(Tile tile) : bool
        +GetRackSize() : int
        +GetRemainingTilePoints() : int
    }

    class Tile {
        -string _letterRepresentation
        -int _points
        -bool _isBlank

        +Tile(string letter, int points, bool isBlank)
        +GetLetter() : string
        +GetPoints() : int
        +IsBlank() : bool
        +SetLetter(string letter) : void
        +ToString() : string
    }

    class TileBag {
        -List~Tile~ _tiles
        -Random _random

        +TileBag()
        +DrawTiles(int count) : List~Tile~
        +ReturnTiles(List~Tile~ tiles) : void
        +GetRemainingCount() : int
        -InitializeStandardTiles() : void
    }

    class Board {
        -Square[,] _grid
        -const int BOARD_SIZE = 15
        -const int CENTER_POSITION = 7

        +Board()
        +PlaceTile(Tile tile, int x, int y) : bool
        +GetSquare(int x, int y) : Square
        +IsSquareEmpty(int x, int y) : bool
        +HasTileAt(int x, int y) : bool
        +IsFirstMove() : bool
        +IsValidCoordinate(int x, int y) : bool
        +GetHorizontalWord(int row, int col) : string
        +GetVerticalWord(int row, int col) : string
        +GetAllFormedWords(List~TilePlacement~ placements) : List~string~
        +GetAdjacentOccupiedSquares(int x, int y) : List~Square~
        +DisplayBoard() : void
        -InitializeBonusSquares() : void
        -FindWordStart(int row, int col, Direction direction) : int
    }

    class Square {
        -int _x
        -int _y
        -BonusSquareType _bonusType
        -Tile _currentTile

        +Square(int x, int y, BonusSquareType bonusType)
        +GetX() : int
        +GetY() : int
        +GetBonusType() : BonusSquareType
        +GetTile() : Tile
        +SetTile(Tile tile) : void
        +IsEmpty() : bool
        +HasTile() : bool
    }

    class DictionaryValidator {
        -HashSet~string~ _wordList

        +DictionaryValidator(string dictionaryFilePath)
        +IsValidWord(string word) : bool
        -LoadDictionary(string filePath) : void
    }

    %% UI CLASS
    class ConsoleGameUI {
        -GameControl _gameControl
        -GetUserInput _getUserInput

        +ConsoleGameUI(GameControl gameControl)
        +SetupPlayers() : void
        +StartGameLoop() : void
        +DisplayGameState(Player currentPlayer) : void
        +DisplayBoard() : void
        +DisplayPlayerInfo(Player player) : void
        +DisplayAllPlayerScores() : void
        +GetPlayerAction() : TurnActionType
        +GetPlacementInput(Player player) : List~TilePlacement~
        +GetSwapTilesInput(Player player) : List~Tile~
        +ShowHelp() : void
        +DisplayEndGame(Player winner, List~Player~ allPlayers) : void
        +PromptForBlankTileChar(Tile blankTile) : char
        +GetPlayerName(int playerNumber) : string
        +ConfirmPlayerSetup(List~Player~ players) : bool
        -ParseCoordinates(string input) : int[]
        -ParseDirection(string input) : Direction
        -ParseTiles(string input, List~Tile~ rack) : List~Tile~
        -IsValidInput(string input) : bool
        -DisplayError(string message) : void
        -ClearScreen() : void
        -ValidatePlayerName(string name) : bool
    }

    %% HELPER CLASSES
    class TilePlacement {
        <<struct>>
        -Tile _tile
        -int _x
        -int _y

        +TilePlacement(Tile tile, int x, int y)
        +GetTile() : Tile
        +GetX() : int
        +GetY() : int
    }

    class GameStats {
        -int _turnsPlayed
        -int _totalWordsFormed
        -string _highestScoringWord
        -int _highestWordScore

        +GameStats()
        +IncrementTurns() : void
        +AddWordsFormed(int count) : void
        +UpdateHighestWord(string word, int score) : void
        +GetTurnsPlayed() : int
        +GetTotalWords() : int
        +GetHighestWord() : string
        +GetHighestScore() : int
    }

    %% RELATIONSHIPS
    
    %% GameControl Relationships
    GameControl "1" o-- "*" Player : manages
    GameControl "1" *-- "1" Board : has
    GameControl "1" *-- "1" GameStats : tracks
    GameControl "1" --> ITileSource : uses
    GameControl "1" --> IDictionaryValidator : uses
    GameControl ..> RequestBlankTileChar : uses delegate
    GameControl ..> ValidateWord : uses delegate
    GameControl ..> DisplayMessage : uses delegate
    GameControl ..> ConfirmAction : uses delegate
    GameControl ..> NotifyGameEvent : uses delegate

    %% Player Relationships
    Player "1" *-- "*" Tile : has in rack

    %% TileBag Relationships
    ITileSource <|.. TileBag : implements
    TileBag "1" *-- "*" Tile : contains

    %% Board Relationships
    Board "1" *-- "*" Square : consists of
    Board --> Direction : uses

    %% Square Relationships
    Square "1" o-- "0..1" Tile : can contain
    Square --> BonusSquareType : has

    %% DictionaryValidator Relationships
    IDictionaryValidator <|.. DictionaryValidator : implements

    %% ConsoleGameUI Relationships
    ConsoleGameUI "1" --> "1" GameControl : controls
    ConsoleGameUI --> TurnActionType : uses
    ConsoleGameUI --> Direction : uses
    ConsoleGameUI --> MoveError : handles
    ConsoleGameUI ..> RequestBlankTileChar : implements handler
    ConsoleGameUI ..> ValidateWord : implements handler
    ConsoleGameUI ..> DisplayMessage : implements handler
    ConsoleGameUI ..> ConfirmAction : implements handler
    ConsoleGameUI ..> NotifyGameEvent : implements handler
    ConsoleGameUI ..> GetUserInput : uses delegate

    %% TilePlacement Relationships
    TilePlacement --> Tile : holds