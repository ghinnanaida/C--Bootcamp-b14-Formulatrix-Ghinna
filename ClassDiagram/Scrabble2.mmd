classDiagram
    direction TB

    %% ENUMS
    class BonusSquareType {
        <<Enumeration>>
        Normal
        DoubleLetter
        TripleLetter
        DoubleWord
        TripleWord
    }

    %% class TurnActionType {
    %%     <<Enumeration>>
    %%     PlaceWord
    %%     SwapTiles
    %%     SkipTurn
    %%     QuitGame
    %%     ShuffleTiles
    %% }

    class Direction {
        <<Enumeration>>
        Horizontal
        Vertical
    }

    class MoveError {
        <<Enumeration>>
        InvalidPlacement
        WordNotInDictionary
        NotConnected
        InvalidFirstMove
        TileNotInRack
        InvalidCoordinates
        TooFewPlayers
        TooManyPlayers
        DuplicatePlayerName
        GameAlreadyStarted
        InvalidTilesToSwap
        TooManyTilesToSwap
    }

    class GameState {
        <<Enumeration>>
        NotStarted
        InProgress
        Ended
    }

    %% INTERFACES
    class IDictionary {
        <<interface>>
        +GetWordSet() : HashSet~string~
        +LoadDictionary() : void
    }

    class ITileBag {
        <<interface>>
        +GetTiles() : List~Tile~
        +GetRemainingCount() : int
        +SetTiles(List~TIle~) : void
        +SetRemainingCount() : void
        +InitializeStandardTiles() : void
    }

    class IPlayer {
        <<interface>>
        +GetName() : string
        +GetScore() : int
        +GetRack() : List~Tile~
        +SetName(string name) : void
        +SetScore(int score) : void
        +AddScore(int points) : void
    }

    class IBoard {
        <<interface>>
        +GetGrid() : Square[,]
        +GetSquare(int x, int y) : Square
        +SetGrid(Square[,]) : void
        +SetSquare(int x, int y) : void
        +InitializeBonusSquares() : void
    }

    %% CORE GAME CLASSES
    class GameControl {
        -List~IPlayer~ _players
        -Dictionary~IPlayer, List<.Tile>~ _playerRacks
        -int _activePlayerIndex
        -IBoard _gameBoard
        -ITileBag _tileBag
        -IDictionary _dictionary
        -GameState _currentState 
        -int _consecutiveSkips
        -const int MIN_PLAYERS = 2
        -const int MAX_PLAYERS = 4

        +event Func~Tile, char~ OnRequestBlankTileChar
        +event Action~string~ OnDisplayMessage
        +event Func~string, bool~ OnConfirmAction
        +event Action~string, object~ OnGameEvent
        +event Func~string, string~ OnGetUserInput

        +GameControl(IDictionary dictionary, ITileBag tileBag, IBoard board)
        +AddPlayer(IPlayer player) : bool
        +RemovePlayer(string playerName) : bool
        +StartGame() : bool
        +GetCurrentPlayer() : IPlayer
        +GetAllPlayers() : List~IPlayer~
        +GetWinner() : IPlayer

        +PerformTurn(IPlayer player, List~TilePlacement~ placements) : MoveError
        +SwapTiles(IPlayer player, List~Tile~ tilesToSwap) : MoveError
        +SkipTurn(IPlayer player) : MoveError
        +GetLastFormedWords() : List~string~
        +NextTurn() : void
        +RefillPlayerRack(Dictionary~IPlayer, List<.Tile>~ playerRacks) : void

        +CalculateWordScore(List~string~ words, List~TilePlacement~ placements) : int
        +IsPlacementValid(List~TilePlacement~ placements) : MoveError
        +IsValidFirstMove(List~TilePlacement~ placements) : bool
        +AreConsecutivePlacements(List~TilePlacement~ placements) : bool
        +ConnectsToExistingTiles(List~TilePlacement~ placements) : bool
        +GetWordFromBoard(int row, int col, Direction direction) : string
        +GetAllWordsFromPlacement(List~TilePlacement~ placements) : List~string~
        +CheckTileInPlayerRack(IPlayer player, Tile tile) : bool
        +IsWordInDictionary(string word) : bool
        +PlaceTileOnBoard(Tile tile, int x, y) : bool
        +DrawTilesFromBag(int count) : List~Tile~
        +ReturnTilesToBag(List~Tile~ tiles) : void
        +FindWordStartOnBoard(int row, col, Direction direction) : int
        +IsCoordinateValid(int x, y) : bool
        +IsSquareEmptyOnBoard(int x, y) : bool
        +IsTileBlank(Tile tile) : bool

        +CheckEndGameConditions() : void 
        +ValidatePlayerCount() : bool
        +IsPlayerNameUnique(string name) : bool

        +ParsePlayerInputToTilePlacement(string rawInput, IPlayer player) : TilePlacement
    }

    class Player {
        -string _name
        -int _score
        %% -List~Tile~ _rack

        +Player(string name)
        +GetName() : string
        +GetScore() : int
        %% +GetRack() : List~Tile~
        +SetName(string name) : void
        +SetScore(int score) : void
        +AddScore(int points) : void
    }
    IPlayer <|.. Player : implements

    class Tile {
        -char _letter
        -int _points

        +Tile(char letter, int points)
        +GetLetter() : char
        +GetPoints() : int
        +SetLetter(char letter) : void
        +SetPoint(int points) : void
        +ToString() : string
    }

    class TileBag {
        -List~Tile~ _tiles
        -Random _random

        +TileBag()
        +GetTiles() : List~Tile~
        +GetRemainingCount() : int
        +SetTiles(List~Tile~) : void
        +SetRemainingCount() : void
        +InitializeStandardTiles() : void
    }
    ITileBag <|.. TileBag : implements

    class Board {
        -Square[,] _grid
        -const int BOARD_SIZE = 15
        -const int CENTER_POSITION = 7

        +Board()
        +GetGrid() : Square[,]
        +GetSquare(int x, y) : Square
        +SetGrid(Square[,]) : void
        +SetSquare(Square) : void
        +InitializeBonusSquares() : void
    }
    IBoard <|.. Board : implements

    class Square {
        -int _x
        -int _y
        -BonusSquareType _bonusType
        -Tile _currentTile
        -bool _isBonusSquareUsed

        +Square(int x, y, BonusSquareType bonusType)
        +GetX() : int
        +GetY() : int
        +GetBonusType() : BonusSquareType
        +GetTile() : Tile
        +GetBonusSquareUsed() : bool
        +SetTile(Tile tile) : void
        +SetX(int x) : void
        +SetY(int y) : void
        +SetBonusType(BonusSquareType) : void
        +SetBonusSquareUsed(bool status) : void
    }

    class Dictionary {
        -HashSet~string~ _wordSet

        +Dictionary(string dictionaryFilePath)
        +GetWordSet() : HashSet~string~
        +LoadDictionary(string filePath) : void
    }
    IDictionary <|.. Dictionary : implements

    %% HELPER CLASSES
    class TilePlacement {
        <<struct>>
        -Tile _tile
        -int _x
        -int _y

        +TilePlacement(Tile tile, int x, y)
        +GetTile() : Tile
        +GetX() : int
        +GetY() : int
    }

    %% RELATIONSHIPS
    GameControl "1" o-- "*" IPlayer : manages
    GameControl "1" *-- "1" IBoard : uses
    GameControl "1" --> ITileBag : uses
    GameControl "1" --> IDictionary : uses
    GameControl --> MoveError : uses
    GameControl --> Direction : uses
    GameControl "1" *-- "*" TilePlacement : creates and uses
    GameControl --> GameState : has a state

    IPlayer <|.. Player
    ITileBag <|.. TileBag
    IBoard <|.. Board
    IDictionary <|.. Dictionary

    Player "1" *-- "*" Tile : has in rack
    TileBag "1" *-- "*" Tile : contains
    Board "1" *-- "*" Square : consists of
    Square "1" o-- "0..1" Tile : can contain
    Square --> BonusSquareType : has

    TilePlacement "1" *-- "1" Tile : holds