@model ProgressDetailDTO
@{
    ViewData["Title"] = Model.Book.Title;
}

<div class="card">
    <div class="card-header">
        <h2>@Model.Book.Title</h2>
        <h5 class="text-muted">by @Model.Book.Author</h5>
    </div>
    <div class="card-body">
        <p><strong>Publisher:</strong> @Model.Book.Publisher</p>
        <p><strong>Published:</strong> @Model.Book.PublishedDate?.ToShortDateString()</p>
        <p>
            <strong>Genres:</strong> 
            @foreach(var genre in Model.Book.Genres) { <span class="badge bg-secondary">@genre</span> }
        </p>
        <hr/>
        <h4>My Progress</h4>
        <p><strong>Status:</strong> @Model.Tracker.Status</p>
        <p><strong>Format:</strong> @Model.Tracker.BookType</p>
        <p><strong>Rating:</strong> @(Model.Tracker.Rating > 0 ? Model.Tracker.Rating.ToString() : "Not Rated") / 10</p>
        <div class="progress mt-2 mb-2" style="height: 20px;"><div class="progress-bar" role="progressbar" style="width: @Model.Tracker.ProgressPercentage.ToString("0")%;" >@Model.Tracker.ProgressPercentage.ToString("0")%</div></div>
        <p>@Model.Tracker.CurrentValue / @Model.Tracker.TotalValue @Model.Tracker.ProgressUnit.ToString()</p>
        <h4>My Notes & Quotes</h4>
        <div class="row">
            <div class="col-md-7">
                <div id="notesList" class="list-group">
                    @foreach(var note in Model.Notes)
                    {
                        <div class="list-group-item" id="note-@note.Id">
                            <p class="mb-1">@note.Note</p>
                            <small class="text-muted">@note.CreatedAt.ToString("dd MMM yyyy")</small>
                            <button class="btn btn-sm btn-outline-danger float-end delete-note-btn" data-note-id="@note.Id">X</button>
                        </div>
                    }
                </div>
            </div>
            <div class="col-md-5">
                <form id="addNoteForm">
                    <input type="hidden" name="ProgressTrackerId" value="@Model.Tracker.Id" />
                    <div class="mb-2">
                        <label for="Note" class="form-label">Add a new note</label>
                        <textarea name="Note" class="form-control" rows="4"></textarea>
                    </div>
                    <button type="submit" class="btn btn-success">Save Note</button>
                </form>
            </div>
        </div>
    </div>
    <div class="card-footer text-muted">
        <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#updateProgressModal">Update Progress</button>
        <form asp-action="Delete" asp-route-id="@Model.Tracker.Id" method="post" class="d-inline" onsubmit="return confirm('Are you sure you want to remove this book from your journal?');">
            <button type="submit" class="btn btn-danger">Delete Progress</button>
        </form>
        <a asp-controller="Dashboard" asp-action="Index" class="btn btn-secondary">Back to Dashboard</a>
    </div>
</div>

@await Html.PartialAsync("_UpdateProgressTrackerModal", new ProgressTrackerUpdateDTO { Id = Model.Tracker.Id, CurrentValue = Model.Tracker.CurrentValue, Rating = Model.Tracker.Rating, Status = Model.Tracker.Status, StartDate = Model.Tracker.StartDate, EndDate = Model.Tracker.EndDate })
@section Scripts {
<script>
$(document).ready(function() {
    $('#addNoteForm').on('submit', function(e) {
        e.preventDefault();
        var formData = {
            ProgressTrackerId: parseInt($('input[name="ProgressTrackerId"]').val()),
            Note: $('textarea[name="Note"]').val()
        };

        $.ajax({
            url: '/api/BookNote',
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(formData),
            success: function(newNote) {
                var noteHtml = `
                    <div class="list-group-item" id="note-${newNote.id}">
                        <p class="mb-1">${newNote.note}</p>
                        <small class="text-muted">${new Date(newNote.createdAt).toLocaleDateString()}</small>
                        <button class="btn btn-sm btn-outline-danger float-end delete-note-btn" data-note-id="${newNote.id}">X</button>
                    </div>`;
                $('#notesList').prepend(noteHtml);
                $('textarea[name="Note"]').val('');
            },
            error: function() {
                alert('Failed to add note.');
            }
        });
    });

    $('#notesList').on('click', '.delete-note-btn', function() {
        var noteId = $(this).data('note-id');
        if (confirm('Are you sure you want to delete this note?')) {
            $.ajax({
                url: '/api/BookNote/' + noteId,
                type: 'DELETE',
                success: function() {
                    $('#note-' + noteId).remove();
                },
                error: function() {
                    alert('Failed to delete note.');
                }
            });
        }
    });
});
</script>
}