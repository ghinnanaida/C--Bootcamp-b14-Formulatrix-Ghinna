@model ProgressDetailDTO
@{
    ViewData["Title"] = Model.Book.Title;
}

<div class="fade-in">
    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show shadow-sm border-0" role="alert">
            <i class="bi bi-exclamation-triangle-fill me-2"></i>@TempData["Error"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show shadow-sm border-0" role="alert">
            <i class="bi bi-check-circle-fill me-2"></i>@TempData["Success"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <div class="card shadow-sm border-0 mb-4">
        <div class="card-header bg-gradient-primary text-white border-0">
            <div class="row align-items-center">
                <div class="col">
                    <h2 class="mb-1 fw-bold">@Model.Book.Title</h2>
                    <h5 class="mb-0 opacity-75">
                        <i class="bi bi-person me-2"></i>by @Model.Book.Author
                    </h5>
                </div>
                <div class="col-auto">
                    <div class="reading-status-badge">
                        @{
                            var statusClass = Model.Tracker.Status switch
                            {
                                BookStatus.NotStarted => "bg-secondary",
                                BookStatus.InProgress => "bg-warning text-dark",
                                BookStatus.Completed => "bg-success",
                                BookStatus.OnHold => "bg-info text-dark",
                                _ => "bg-secondary"
                            };
                        }
                        <span class="badge @statusClass fs-6 px-3 py-2">
                            @Model.Tracker.Status.ToString()
                        </span>
                    </div>
                </div>
            </div>
        </div>
        <div class="card-body">
            <div class="row g-4">
                <div class="col-lg-6">
                    <h5 class="fw-bold mb-3">
                        <i class="bi bi-info-circle text-primary me-2"></i>Book Information
                    </h5>
                    <div class="book-info">
                        <div class="info-item d-flex justify-content-between border-bottom pb-2 mb-2">
                            <span class="text-muted">
                                <i class="bi bi-building me-2"></i>Publisher
                            </span>
                            <span class="fw-medium">@Model.Book.Publisher</span>
                        </div>
                        <div class="info-item d-flex justify-content-between border-bottom pb-2 mb-2">
                            <span class="text-muted">
                                <i class="bi bi-calendar me-2"></i>Published
                            </span>
                            <span class="fw-medium">@(Model.Book.PublishedDate?.ToString("MMM yyyy") ?? "Unknown")</span>
                        </div>
                        <div class="info-item d-flex justify-content-between border-bottom pb-2 mb-3">
                            <span class="text-muted">
                                <i class="bi bi-book me-2"></i>Format
                            </span>
                            <span class="fw-medium">@Model.Tracker.BookType</span>
                        </div>
                        <div class="genres-section">
                            <span class="text-muted d-block mb-2">
                                <i class="bi bi-tags me-2"></i>Genres
                            </span>
                            <div class="d-flex flex-wrap gap-2">
                                @foreach(var genre in Model.Book.Genres) 
                                { 
                                    <span class="badge bg-light text-dark border">@genre</span> 
                                }
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-lg-6">
                    <h5 class="fw-bold mb-3">
                        <i class="bi bi-graph-up text-primary me-2"></i>Reading Progress
                    </h5>
                    <div class="progress-section">
                        <div class="mb-3">
                            <div class="d-flex justify-content-between mb-2">
                                <span class="text-muted">Progress</span>
                                <span class="fw-bold text-primary">@Model.Tracker.ProgressPercentage.ToString("0")%</span>
                            </div>
                            <div class="progress progress-enhanced" style="height: 12px;">
                                <div class="progress-bar progress-bar-animated" 
                                     role="progressbar" 
                                     style="width: @Model.Tracker.ProgressPercentage.ToString("0")%;" 
                                     aria-valuenow="@Model.Tracker.ProgressPercentage" 
                                     aria-valuemin="0" 
                                     aria-valuemax="100">
                                </div>
                            </div>
                            <small class="text-muted">
                                @Model.Tracker.CurrentValue / @Model.Tracker.TotalValue @Model.Tracker.ProgressUnit.ToString()
                            </small>
                        </div>

                        <div class="rating-section mb-3">
                            <div class="d-flex justify-content-between align-items-center">
                                <span class="text-muted">
                                    <i class="bi bi-star me-2"></i>Your Rating
                                </span>
                                <div class="rating-display">
                                    @if (Model.Tracker.Rating > 0)
                                    {
                                        <span class="rating-value">@Model.Tracker.Rating/10</span>
                                        <div class="rating-stars ms-2">
                                            @for (int i = 1; i <= 5; i++)
                                            {
                                                var starClass = (Model.Tracker.Rating / 2) >= i ? "bi-star-fill text-warning" : 
                                                               (Model.Tracker.Rating / 2) >= (i - 0.5) ? "bi-star-half text-warning" : "bi-star text-muted";
                                                <i class="bi @starClass"></i>
                                            }
                                        </div>
                                    }
                                    else
                                    {
                                        <span class="text-muted">Not rated</span>
                                    }
                                </div>
                            </div>
                        </div>

                        @if (Model.Tracker.StartDate.HasValue || Model.Tracker.EndDate.HasValue)
                        {
                            <div class="reading-dates">
                                @if (Model.Tracker.StartDate.HasValue)
                                {
                                    <div class="d-flex justify-content-between mb-1">
                                        <span class="text-muted">
                                            <i class="bi bi-play-circle me-2"></i>Started
                                        </span>
                                        <span>@Model.Tracker.StartDate.Value.ToString("MMM dd, yyyy")</span>
                                    </div>
                                }
                                @if (Model.Tracker.EndDate.HasValue)
                                {
                                    <div class="d-flex justify-content-between">
                                        <span class="text-muted">
                                            <i class="bi bi-check-circle me-2"></i>Finished
                                        </span>
                                        <span>@Model.Tracker.EndDate.Value.ToString("MMM dd, yyyy")</span>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row g-4">
        <div class="col-lg-8">
            <div class="card shadow-sm border-0 h-100">
                <div class="card-header bg-white border-bottom">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="mb-0 fw-bold">
                            <i class="bi bi-journal-text text-primary me-2"></i>My Notes & Quotes
                        </h5>
                    </div>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-12 mb-4">
                            <div id="notesList" class="notes-container">
                                @if (Model.Notes.Any())
                                {
                                    @foreach(var note in Model.Notes.OrderByDescending(n => n.CreatedAt))
                                    {
                                        <div class="note-item card border-0 bg-light mb-3" id="note-@note.Id">
                                            <div class="card-body">
                                                <div class="d-flex justify-content-between align-items-start">
                                                    <div class="note-content flex-grow-1">
                                                        <p class="mb-2">@note.Note</p>
                                                        <small class="text-muted">
                                                            <i class="bi bi-calendar3 me-1"></i>@note.CreatedAt.ToString("MMM dd, yyyy 'at' h:mm tt")
                                                        </small>
                                                    </div>
                                                    <button class="btn btn-sm btn-outline-danger delete-note-btn ms-3" 
                                                            data-note-id="@note.Id"
                                                            data-bs-toggle="tooltip" title="Delete note">
                                                        <i class="bi bi-trash"></i>
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <div class="empty-notes text-center py-4">
                                        <i class="bi bi-journal display-4 text-muted mb-3"></i>
                                        <p class="text-muted">No notes yet. Add your thoughts about this book!</p>
                                    </div>
                                }
                            </div>
                        </div>

                        <div class="col-12">
                            <div class="card border-primary border-opacity-25">
                                <div class="card-body">
                                    <form id="addNoteForm">
                                        <input type="hidden" name="ProgressTrackerId" value="@Model.Tracker.Id" />
                                        <div class="mb-3">
                                            <label for="Note" class="form-label fw-semibold">
                                                <i class="bi bi-plus-circle text-primary me-2"></i>Add a new note
                                            </label>
                                            <textarea name="Note" 
                                                      class="form-control border-0 bg-light" 
                                                      rows="3" 
                                                      placeholder="Share your thoughts, quotes, or insights about this book..."
                                                      required></textarea>
                                        </div>
                                        <button type="submit" class="btn btn-primary">
                                            <i class="bi bi-save me-2"></i>Save Note
                                        </button>
                                    </form>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-lg-4">
            <div class="card shadow-sm border-0 h-100">
                <div class="card-header bg-white border-bottom">
                    <h5 class="mb-0 fw-bold">
                        <i class="bi bi-gear text-primary me-2"></i>Actions
                    </h5>
                </div>
                <div class="card-body">
                    <div class="d-grid gap-3">
                        <button class="btn btn-primary btn-lg shadow-sm" 
                                data-bs-toggle="modal" 
                                data-bs-target="#updateProgressModal">
                            <i class="bi bi-arrow-up-circle me-2"></i>Update Progress
                        </button>

                        <div class="border-top pt-3 mt-3">
                            <div class="d-grid gap-2">
                                <a asp-controller="Dashboard" asp-action="Index" class="btn btn-outline-secondary">
                                    <i class="bi bi-speedometer2 me-2"></i>Back to Dashboard
                                </a>
                                <a asp-controller="Library" asp-action="Index" class="btn btn-outline-secondary">
                                    <i class="bi bi-collection me-2"></i>Back to Library
                                </a>
                            </div>
                        </div>

                        <div class="border-top pt-3 mt-3">
                            <h6 class="text-danger fw-semibold mb-2">
                                <i class="bi bi-exclamation-triangle me-2"></i>Danger Zone
                            </h6>
                            <button class="btn btn-outline-danger btn-sm w-100" 
                                    data-bs-toggle="modal" 
                                    data-bs-target="#deleteProgressModal">
                                <i class="bi bi-trash me-2"></i>Remove from Journal
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@await Html.PartialAsync("_UpdateProgressTrackerModal", new ProgressTrackerUpdateDTO 
{ 
    Id = Model.Tracker.Id, 
    CurrentValue = Model.Tracker.CurrentValue, 
    TotalValue = Model.Tracker.TotalValue,
    Rating = Model.Tracker.Rating, 
    Status = Model.Tracker.Status, 
    StartDate = Model.Tracker.StartDate, 
    EndDate = Model.Tracker.EndDate 
})

<div class="modal fade" id="deleteProgressModal" tabindex="-1" aria-labelledby="deleteProgressModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header border-0 pb-0">
                <h5 class="modal-title text-danger" id="deleteProgressModalLabel">
                    <i class="bi bi-exclamation-triangle me-2"></i>Remove from Journal
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to remove "<span class="fw-bold">@Model.Book.Title</span>" from your journal?</p>
                <div class="alert alert-warning border-0 bg-warning bg-opacity-10">
                    <i class="bi bi-exclamation-triangle text-warning me-2"></i>
                    <small>This will delete all your progress, notes, and reading history for this book. This action cannot be undone.</small>
                </div>
            </div>
            <div class="modal-footer border-0 pt-0">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Keep in Journal</button>
                <form asp-action="Delete" asp-route-id="@Model.Tracker.Id" method="post" class="d-inline">
                    <button type="submit" class="btn btn-danger">
                        <i class="bi bi-trash me-2"></i>Remove from Journal
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
<script>
$(document).ready(function() {
    $('[data-bs-toggle="tooltip"]').tooltip();

    $('#addNoteForm').on('submit', function(e) {
        e.preventDefault();
        var formData = {
            ProgressTrackerId: parseInt($('input[name="ProgressTrackerId"]').val()),
            Note: $('textarea[name="Note"]').val()
        };
        var submitBtn = $(this).find('button[type="submit"]');
        var originalText = submitBtn.html();
        submitBtn.prop('disabled', true).html('<i class="bi bi-hourglass me-2"></i>Saving...');

        $.ajax({
            url: '/api/BookNote',
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(formData),
            success: function(newNote) {
                var noteHtml = `
                    <div class="note-item card border-0 bg-light mb-3 new-note" id="note-${newNote.id}">
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-start">
                                <div class="note-content flex-grow-1">
                                    <p class="mb-2">${newNote.note}</p>
                                    <small class="text-muted">
                                        <i class="bi bi-calendar3 me-1"></i>${new Date(newNote.createdAt).toLocaleDateString('en-US', { 
                                            year: 'numeric', 
                                            month: 'short', 
                                            day: 'numeric',
                                            hour: 'numeric',
                                            minute: '2-digit'
                                        })}
                                    </small>
                                </div>
                                <button class="btn btn-sm btn-outline-danger delete-note-btn ms-3" 
                                        data-note-id="${newNote.id}"
                                        data-bs-toggle="tooltip" title="Delete note">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </div>
                        </div>
                    </div>`;
                $('.empty-notes').remove();
                $('#notesList').prepend(noteHtml);
                $('.new-note').hide().slideDown(300);
                
                $('textarea[name="Note"]').val('');
                showToast('Note added successfully!', 'success');
            },
            error: function(xhr) {
                var errorMessage = xhr.responseJSON?.message || 'Failed to add note.';
                showToast(errorMessage, 'error');
            },
            complete: function() {
                submitBtn.prop('disabled', false).html(originalText);
            }
        });
    });

    $('#notesList').on('click', '.delete-note-btn', function() {
        var noteId = $(this).data('note-id');
        var noteElement = $('#note-' + noteId);
        
        if (confirm('Are you sure you want to delete this note?')) {
            $.ajax({
                url: '/api/BookNote/' + noteId,
                type: 'DELETE',
                success: function() {
                    noteElement.slideUp(300, function() {
                        $(this).remove();
                        
                        if ($('#notesList .note-item').length === 0) {
                            $('#notesList').html(`
                                <div class="empty-notes text-center py-4">
                                    <i class="bi bi-journal display-4 text-muted mb-3"></i>
                                    <p class="text-muted">No notes yet. Add your thoughts about this book!</p>
                                </div>
                            `);
                        }
                    });
                    showToast('Note deleted successfully!', 'success');
                },
                error: function() {
                    showToast('Failed to delete note.', 'error');
                }
            });
        }
    });

    function showToast(message, type) {
        var toastClass = type === 'success' ? 'bg-success' : 'bg-danger';
        var icon = type === 'success' ? 'bi-check-circle' : 'bi-exclamation-triangle';
        var toast = $(`
            <div class="toast align-items-center text-white ${toastClass} border-0 position-fixed" 
                 style="top: 20px; right: 20px; z-index: 9999;" role="alert">
                <div class="d-flex">
                    <div class="toast-body">
                        <i class="bi ${icon} me-2"></i>${message}
                    </div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
                </div>
            </div>
        `);
        $('body').append(toast);
        var bsToast = new bootstrap.Toast(toast[0]);
        bsToast.show();
        
        toast.on('hidden.bs.toast', function() {
            $(this).remove();
        });
    }

    $('.card').addClass('animate-fade-in');
});
</script>

<style>
    .bg-gradient-primary {
        background: linear-gradient(135deg, #0d6efd 0%, #0b5ed7 100%);
    }
    
    .progress-enhanced {
        border-radius: 8px;
        background-color: rgba(13, 110, 253, 0.1);
    }
    
    .progress-enhanced .progress-bar {
        border-radius: 8px;
        background: linear-gradient(90deg, #0d6efd 0%, #198754 100%);
    }
    
    .note-item {
        transition: all 0.3s ease;
        border-radius: 12px !important;
    }
    
    .note-item:hover {
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(0,0,0,0.1) !important;
    }
    
    .rating-display {
        display: flex;
        align-items: center;
    }
    
    .rating-value {
        font-weight: 600;
        color: #0d6efd;
        font-size: 1.1rem;
    }
    
    .rating-stars i {
        font-size: 0.9rem;
    }
    
    .info-item {
        padding: 8px 0;
    }
    
    .animate-fade-in {
        animation: fadeInUp 0.6s ease-out;
    }
    
    
    .btn-lg {
        padding: 12px 24px;
        font-weight: 500;
    }
    
    .card {
        border-radius: 12px;
    }
    
    .badge {
        border-radius: 8px;
    }
    
    .notes-container {
        max-height: 400px;
        overflow-y: auto;
    }
    
    .notes-container::-webkit-scrollbar {
        width: 6px;
    }
    
    .notes-container::-webkit-scrollbar-track {
        background: #f1f1f1;
        border-radius: 3px;
    }
    
    .notes-container::-webkit-scrollbar-thumb {
        background: #c1c1c1;
        border-radius: 3px;
    }
    
    .notes-container::-webkit-scrollbar-thumb:hover {
        background: #a8a8a8;
    }
</style>
}