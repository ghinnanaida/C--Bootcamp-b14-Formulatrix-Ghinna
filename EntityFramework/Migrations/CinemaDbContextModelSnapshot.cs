// <auto-generated />
using System;
using EntityFramework.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EntityFramework.Migrations
{
    [DbContext(typeof(CinemaDbContext))]
    partial class CinemaDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("EntityFramework.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Genres", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Action"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Comedy"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Drama"
                        });
                });

            modelBuilder.Entity("EntityFramework.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("GenreId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Rating")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Movies", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "A masked vigilante fights crime in Gotham City.",
                            GenreId = 1,
                            Rating = 9.0,
                            ReleaseDate = new DateTime(2008, 7, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Dark Knight"
                        },
                        new
                        {
                            Id = 2,
                            Description = "The story of a man with a low IQ who accomplished great things.",
                            GenreId = 3,
                            Rating = 8.8000000000000007,
                            ReleaseDate = new DateTime(1994, 7, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Forrest Gump"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Two co-dependent high school seniors are forced to deal with separation anxiety.",
                            GenreId = 2,
                            Rating = 7.5999999999999996,
                            ReleaseDate = new DateTime(2007, 8, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Superbad"
                        });
                });

            modelBuilder.Entity("EntityFramework.Models.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MovieId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("ShowTime")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("StudioId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("MovieId");

                    b.HasIndex("StudioId");

                    b.ToTable("Schedules", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MovieId = 1,
                            Price = 50000m,
                            ShowTime = new DateTime(2025, 8, 12, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            StudioId = 1
                        },
                        new
                        {
                            Id = 2,
                            MovieId = 1,
                            Price = 65000m,
                            ShowTime = new DateTime(2025, 8, 12, 21, 30, 0, 0, DateTimeKind.Unspecified),
                            StudioId = 2
                        },
                        new
                        {
                            Id = 3,
                            MovieId = 2,
                            Price = 45000m,
                            ShowTime = new DateTime(2025, 8, 12, 19, 15, 0, 0, DateTimeKind.Unspecified),
                            StudioId = 3
                        },
                        new
                        {
                            Id = 4,
                            MovieId = 3,
                            Price = 45000m,
                            ShowTime = new DateTime(2025, 8, 13, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            StudioId = 1
                        });
                });

            modelBuilder.Entity("EntityFramework.Models.Studio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Studios", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Studio A"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Studio B (IMAX)"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Studio C"
                        });
                });

            modelBuilder.Entity("EntityFramework.Models.Movie", b =>
                {
                    b.HasOne("EntityFramework.Models.Genre", "Genre")
                        .WithMany("Movies")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("EntityFramework.Models.Schedule", b =>
                {
                    b.HasOne("EntityFramework.Models.Movie", "Movie")
                        .WithMany("ShowTime")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityFramework.Models.Studio", "Studio")
                        .WithMany("ShowTime")
                        .HasForeignKey("StudioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("Studio");
                });

            modelBuilder.Entity("EntityFramework.Models.Genre", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("EntityFramework.Models.Movie", b =>
                {
                    b.Navigation("ShowTime");
                });

            modelBuilder.Entity("EntityFramework.Models.Studio", b =>
                {
                    b.Navigation("ShowTime");
                });
#pragma warning restore 612, 618
        }
    }
}
